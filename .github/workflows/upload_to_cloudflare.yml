name: Upload to Cloudflare R2

on:
  push:
    branches:
      - main
#    paths:
#      - simple.sh

jobs:
  upload:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install AWS CLI
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip" 
          unzip -o awscliv2.zip
          sudo ./aws/install --update
          aws --version

      - name: Configure AWS CLI for Cloudflare R2
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.CLOUDFLARE_R2_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.CLOUDFLARE_R2_SECRET_KEY }}
        run: |
          aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
          aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
          aws configure set default.region us-east-1
          # Set the Cloudflare R2 endpoint (replace with your actual endpoint if different)
          aws configure set default.s3.endpoint_url https://${{ vars.CLOUDFLARE_R2_ACCOUNT_ID }}.r2.cloudflarestorage.com

      - name: Upload scripts to Cloudflare R2
        env:
          BUCKET_URL: ${{ vars.PROD_CLOUDFLARE_INSTALLER_BUCKET }} # e.g., https://<account_id>.r2.cloudflarestorage.com/<bucket_name>
          SOURCE_DIR: scripts/
          TARGET_DIR: scripts/ # Adjust if you want a different target directory in R2
        run: |
          aws s3 sync "$SOURCE_DIR" "$BUCKET_URL/$TARGET_DIR" --acl public-read

      - name: Bump Version and Create Tag
        if: ${{ success() }}
        id: versioning
        env:
          TAG_CREATION_TOKEN: ${{ secrets.OG_RELEASE_TAG_UPDATE }}
        run: |
          # Configure git with the token to allow tag creation
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git fetch --tags

          # Get the latest tag and increment based on semantic versioning rules
          latest_tag=$(git tag --sort=-v:refname | head -n 1)
          if [ -z "$latest_tag" ]; then
            # If no tags exist, start at v0.1.0
            new_tag="v0.1.0"
          else
            # Split the latest tag into major, minor, and patch
            IFS='.' read -r major minor patch <<< "${latest_tag//v/}"
            # Increment the patch version
            patch=$((patch + 1))
            new_tag="v${major}.${minor}.${patch}"
          fi

          # Set the new tag as an output
          echo "new_tag=$new_tag" >> "$GITHUB_OUTPUT"

      - name: Create GitHub Release
        if: ${{ success() && steps.versioning.outcome == 'success' }}
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.OG_RELEASE_TAG_UPDATE }}
        with:
          tag_name: ${{ steps.versioning.outputs.new_tag }}
          release_name: "Release ${{ steps.versioning.outputs.new_tag }}"
          body: "Automated release for ${{ steps.versioning.outputs.new_tag }}"
          draft: false
          prerelease: false

      - name: Display new tag
        if: ${{ success() && steps.versioning.outcome == 'success' }}
        run: |
          echo "Created new tag: ${{ steps.versioning.outputs.new_tag }}"
